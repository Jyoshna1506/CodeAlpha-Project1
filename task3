import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import scipy.io

# 1. Load EMNIST Letters dataset
data = scipy.io.loadmat('emnist-letters.mat')

# 2. Extract training and testing data
X_train = data['dataset']['train'][0][0]['images'][0][0]
y_train = data['dataset']['train'][0][0]['labels'][0][0].flatten()

X_test = data['dataset']['test'][0][0]['images'][0][0]
y_test = data['dataset']['test'][0][0]['labels'][0][0].flatten()

# 3. Normalize and reshape data
X_train = X_train / 255.0
X_test = X_test / 255.0

# Reshape and transpose for correct orientation
X_train = X_train.reshape(-1, 28, 28).transpose(0, 2, 1)
X_test = X_test.reshape(-1, 28, 28).transpose(0, 2, 1)

# Expand dims for CNN input shape (batch, height, width, channels)
X_train = np.expand_dims(X_train, -1)
X_test = np.expand_dims(X_test, -1)

# Labels: 1–26 for A–Z, convert to 0–25
y_train = to_categorical(y_train - 1, 26)
y_test = to_categorical(y_test - 1, 26)

# 4. Build CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    Dropout(0.25),
    Conv2D(64, kernel_size=(3,3), activation='relu'),
    MaxPooling2D(pool_size=(2,2)),
    Dropout(0.25),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(26, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 5. Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=128)

# 6. Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy:.4f}')

# 7. Plot accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()
